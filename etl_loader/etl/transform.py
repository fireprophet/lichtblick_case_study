import os
import json
import difflib
import pandas as pd
from etl.schemas import EXPECTED_COLUMNS

def transform_data(file_path: str, entity: str) -> pd.DataFrame:
    print(f"[TRANSFORM] –ß—Ç–µ–Ω–∏–µ —Ñ–∞–π–ª–∞: {file_path}")
    matching_dir = os.getenv("MATCHING_DIR", "/app/matchings")
    os.makedirs(matching_dir, exist_ok=True)
    matching_file = os.path.join(matching_dir, f"matching_{os.path.basename(file_path).replace('.csv', '.json')}")

    # ‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–π delimiter, –µ—Å–ª–∏ –µ—Å—Ç—å
    if os.path.exists(matching_file):
        try:
            with open(matching_file) as f:
                match_data = json.load(f)
                delimiter = match_data.get("__delimiter__")
                if delimiter:
                    print(f"[TRANSFORM] üìé –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–π —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å: '{delimiter}'")
                    df = pd.read_csv(file_path, sep=delimiter)
                    df.columns = [col.strip().replace('\ufeff', '') for col in df.columns]
                    print(f"[DEBUG] üìã –ö–æ–ª–æ–Ω–∫–∏ –ø–æ—Å–ª–µ —á—Ç–µ–Ω–∏—è: {list(df.columns)}")
                    if check_column_match(df, entity, file_path, delimiter):
                        print(f"[TRANSFORM] ‚úÖ –£—Å–ø–µ—à–Ω–æ –ø—Ä–æ—á–∏—Ç–∞–Ω–æ —Å —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–µ–º '{delimiter}'")
                        return df
                    else:
                        raise ValueError("[TRANSFORM] ‚ö†Ô∏è –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç, –Ω–µ—Å–º–æ—Ç—Ä—è –Ω–∞ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–π —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å.")
        except Exception as e:
            print(f"[TRANSFORM] ‚ö† –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ matching-—Ñ–∞–π–ª–∞: {e}")

        print(f"[TRANSFORM] üõë Matching-—Ñ–∞–π–ª —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–æ–¥–±–æ—Ä –ª—É—á—à–µ–≥–æ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è.")
        raise ValueError(f"[TRANSFORM] –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Ñ–∞–π–ª {file_path} —Å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π.")

    # üß† –ü–æ–¥–±–æ—Ä –ª—É—á—à–µ–≥–æ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ matching-—Ñ–∞–π–ª–∞
    best_result, best_missing_count, best_df, best_sep = None, float("inf"), None, None

    for sep in [";", ","]:
        try:
            df = pd.read_csv(file_path, sep=sep)
            df.columns = [col.strip().replace('\ufeff', '') for col in df.columns]
            missing = get_missing_columns(df, entity)
            print(f"[TRANSFORM] –ü–æ–ø—ã—Ç–∫–∞ —Å —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–µ–º '{sep}', –ø—Ä–æ–ø—É—â–µ–Ω–æ –ø–æ–ª–µ–π: {len(missing)}")
            if len(missing) < best_missing_count:
                best_result, best_df, best_sep, best_missing_count = missing, df, sep, len(missing)
        except Exception as e:
            print(f"[TRANSFORM] ‚ö† –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Å —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–µ–º '{sep}': {e}")

    if best_df is not None:
        match_data = {"__delimiter__": best_sep}
        for miss in best_result:
            close = difflib.get_close_matches(miss, set(best_df.columns), n=1, cutoff=0.6)
            match_data[miss] = {
                "suggested": close[0] if close else None,
                "user_submitted": 0,
                "pass_as_null": 0
            }
        with open(matching_file, "w") as f:
            json.dump(match_data, f, indent=2, ensure_ascii=False)
        print(f"[TRANSFORM] üí° –ó–∞–ø–∏—Å–∞–Ω –ª—É—á—à–∏–π —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å '{best_sep}' –≤ matching-—Ñ–∞–π–ª")

        if check_column_match(best_df, entity, file_path, best_sep):
            print(f"[TRANSFORM] ‚úÖ –£—Å–ø–µ—à–Ω–æ –ø—Ä–æ—á–∏—Ç–∞–Ω–æ —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–µ–º '{best_sep}'")
            return best_df

    raise ValueError(f"[TRANSFORM] –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Ñ–∞–π–ª {file_path} —Å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π.")


def get_missing_columns(df: pd.DataFrame, entity: str):
    expected = EXPECTED_COLUMNS.get(entity, set())
    return expected - set(df.columns)


def check_column_match(df: pd.DataFrame, entity: str, file_path: str, sep: str) -> bool:
    expected = EXPECTED_COLUMNS.get(entity, set())
    actual = set(df.columns)
    missing = expected - actual
    if not missing:
        return True

    matching_dir = os.getenv("MATCHING_DIR", "/app/matchings")
    matching_file = os.path.join(matching_dir, f"matching_{os.path.basename(file_path).replace('.csv', '.json')}")

    confirmed, fill_as_null = {}, set()

    try:
        with open(matching_file) as f:
            match_data = json.load(f)
            print(f"[VALIDATION] üìÑ –°–æ–¥–µ—Ä–∂–∏–º–æ–µ matching-—Ñ–∞–π–ª–∞:")
            print(json.dumps(match_data, indent=2, ensure_ascii=False))

            for target, rule in match_data.items():
                if target.startswith("__"):
                    continue
                if rule.get("user_submitted") == 1 and rule.get("suggested") in df.columns:
                    confirmed[target] = rule["suggested"]
                elif rule.get("pass_as_null") == 1:
                    fill_as_null.add(target)

        if confirmed:
            print(f"[VALIDATION] ‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω–Ω—ã–µ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è: {confirmed}")
            df.rename(columns={v: k for k, v in confirmed.items()}, inplace=True)
            print(f"[DEBUG] üßæ –ö–æ–ª–æ–Ω–∫–∏ –ø–æ—Å–ª–µ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è: {list(df.columns)}")

        for col in fill_as_null:
            if col not in df.columns:
                df[col] = "no_data"

        still_missing = expected - set(df.columns)
        if not still_missing:
            return True
        print(f"[VALIDATION] ‚ùå –ù–µ –≤—Å–µ –ø–æ–ª—è –ø–æ–∫—Ä—ã—Ç—ã: {still_missing}")
    except Exception as e:
        print(f"[VALIDATION] ‚ö† –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ matching-—Ñ–∞–π–ª–∞: {e}")

    return False
